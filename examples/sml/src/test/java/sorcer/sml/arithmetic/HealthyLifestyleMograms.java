package sorcer.sml.arithmetic;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.sorcer.test.ProjectContext;
import org.sorcer.test.SorcerTestRunner;
import sorcer.arithmetic.provider.impl.*;
import sorcer.core.provider.rendezvous.ServiceJobber;
import sorcer.service.*;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static sorcer.co.operator.inVal;
import static sorcer.co.operator.outVal;
import static sorcer.eo.operator.*;
import static sorcer.eo.operator.context;
import static sorcer.mo.operator.value;
import static sorcer.so.operator.exert;

@RunWith(SorcerTestRunner.class)
@ProjectContext("examples/sml")
public class HealthyLifestyleMograms {

    /**
     * Assignment solved by Block.
     */
    @Test
    public void healthyLifestyleBlock() throws Exception {

        /*
            Monitoring service in use.
         */
        Task getMonitorData = task("getMonitorData",
                sig("getMonitorData", MonitorImpl.class),
                context("getMonitorData", //getMonitorData function has no arguments, so no inVal() needed
                        result("arg/monitorData", Signature.Direction.IN)));

        /*
            Food ordering service in use.
         */
        Task createFoodPlan = task("createFoodPlan",
                sig("createFoodPlan", FoodOrderImpl.class),
                context("createFoodPlan", inVal("arg/monitorData"),
                        result("arg/foodPlan", Signature.Direction.IN)));

        Task createShoppingList = task("createShoppingList",
                sig("createShoppingList", FoodOrderImpl.class),
                context("createShoppingList", inVal("arg/foodPlan"),
                        result("arg/shoppingList", Signature.Direction.IN)));

        Task orderItems = task("orderItems",
                sig("orderItems", FoodOrderImpl.class),
                context("orderItems", inVal("arg/shoppingList"),
                        result("arg/amountToPay", Signature.Direction.IN)));

        /*
            Payment service in use.
         */
        Task pay = task("pay",
                sig("pay", PaymentsImpl.class),
                context("pay", inVal("arg/amountToPay"),
                        result("block/result", Signature.Direction.OUT)));


        /*
            Input data generated by IoT devices, and transferred to other monitoring interface functions.
            In this case, we don't have input to put in inVal() here.
            GetMonitorData() has already all the data needed to properly execute the entire process.
         */
        Block block = block("block", getMonitorData, createFoodPlan, createShoppingList, orderItems, pay);

        Block result = exert(block);
        assertEquals(value(context(result), "block/result"), true);
    }

    /**
     * Alternative assignment solution created by Job.
     */
    @Test
    public void jobPipeline() throws Exception {

        /*
            Monitoring service in use.
         */
        Task getMonitorData = task("getMonitorData",
                sig("getMonitorData", MonitorImpl.class),
                context("getMonitorData", //getMonitorData function has no arguments, so no inVal() needed
                        outVal("result/monitorData")));

        /*
            Food ordering service in use.
         */
        Task createFoodPlan = task("createFoodPlan",
                sig("createFoodPlan", FoodOrderImpl.class),
                context("createFoodPlan", inVal("arg/monitorData"),
                        outVal("result/foodPlan")));

        Task createShoppingList = task("createShoppingList",
                sig("createShoppingList", FoodOrderImpl.class),
                context("createShoppingList", inVal("arg/foodPlan"),
                        outVal("result/shoppingList")));

        Task orderItems = task("orderItems",
                sig("orderItems", FoodOrderImpl.class),
                context("orderItems", inVal("arg/shoppingList"),
                        outVal("result/amountToPay")));

        /*
            Payment service in use.
         */
        Task pay = task("pay",
                sig("pay", PaymentsImpl.class),
                context("pay", inVal("arg/amountToPay"),
                        outVal("result/result")));

        /*
            Services exerted by Job with the same business logic as by Block above.
         */
        Job job = job(sig("exert", ServiceJobber.class),
                "job", getMonitorData, createFoodPlan, createShoppingList, orderItems, pay,
                pipe(outPoint(getMonitorData, "result/monitorData"), inPoint(createFoodPlan, "arg/monitorData")),
                pipe(outPoint(createFoodPlan, "result/foodPlan"), inPoint(createShoppingList, "arg/foodPlan")),
                pipe(outPoint(createShoppingList, "result/shoppingList"), inPoint(orderItems, "arg/shoppingList")),
                pipe(outPoint(orderItems, "result/amountToPay"), inPoint(pay, "arg/amountToPay")));

        Context context = upcontext(exert(job));
        assertTrue(value(context, "job/pay/result/result").equals(true));
    }

}
